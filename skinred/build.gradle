apply plugin: 'com.android.application'

def skinName = "red.skin"

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

final def TARGET_SKIN_DIR = '../skin-package/'
assembleRelease.doLast {
    println("=====================assembleRelease.doLast.begin.=========================")

    def dir = new File(TARGET_SKIN_DIR)
    if (!dir.exists()) {
        dir.mkdirs()
    }

    def f = new File(TARGET_SKIN_DIR + skinName)
    if (f.exists()) {
        f.delete()
    }

    copy {
        from('build/outputs/apk')
        into(TARGET_SKIN_DIR)
        include '*.apk'
        exclude '**/*-unaligned.apk'
        rename ('skinred-release.apk', skinName)
    }

    println("=====================assembleRelease.doLast success.=========================")
}

assembleDebug.doLast {
    println("=====================assembleDebug.doLast.begin.=========================")

    def dir = new File(TARGET_SKIN_DIR)
    if (!dir.exists()) {
        dir.mkdirs()
    }

    def f = new File(TARGET_SKIN_DIR + skinName)
    if (f.exists()) {
        f.delete()
    }

    copy {
        from('build/outputs/apk')
        into(TARGET_SKIN_DIR)
        include '*.apk'
        exclude '**/*-unaligned.apk'
        rename ('skinred-debug.apk', skinName)
    }

    println("=====================assembleDebug.doLast success.=========================")
}